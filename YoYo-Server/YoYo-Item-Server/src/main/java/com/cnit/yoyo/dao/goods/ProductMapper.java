package com.cnit.yoyo.dao.goods;

import com.cnit.yoyo.model.goods.GoodsWithBLOBs;
import com.cnit.yoyo.model.goods.Product;
import com.cnit.yoyo.model.goods.ProductExample;
import com.cnit.yoyo.model.goods.ProductWithBLOBs;
import com.cnit.yoyo.model.goods.dto.GoodsProductSpecDTO;
import com.cnit.yoyo.model.goods.dto.ProductImgDTO;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface ProductMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int countByExample(ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int deleteByExample(ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int deleteByPrimaryKey(Integer productId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int insert(ProductWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int insertSelective(ProductWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    List<ProductWithBLOBs> selectByExampleWithBLOBs(ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    List<Product> selectByExample(ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    ProductWithBLOBs selectByPrimaryKey(Integer productId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByExampleSelective(@Param("record") ProductWithBLOBs record, @Param("example") ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByExampleWithBLOBs(@Param("record") ProductWithBLOBs record, @Param("example") ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByExample(@Param("record") Product record, @Param("example") ProductExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByPrimaryKeySelective(ProductWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByPrimaryKeyWithBLOBs(ProductWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_products
     *
     * @mbggenerated Fri Apr 10 13:22:39 CST 2015
     */
    int updateByPrimaryKey(Product record);
    
    int findProductByBn(@Param("bns")String[] bn,@Param("productId")Integer productId);
    
    /**
     * 
    * @Title: selectBySpecInfoAndGoodsId 
    * @Description: 根据商品id和商品规格查询货品
    * @author <a href="cmlai@chinacnit.com">赖彩妙</a>
    * @param @param goodsId
    * @param @param specInfo
    * @param @return    设定文件 
    * @return Product    返回类型 
    * @throws
     */
    Product selectBySpecInfoAndGoodsId(@Param("goodsId") Integer goodsId, @Param("specInfo") String specInfo);
    
    /**
     * 根据货品id和减少数量更新货品库存
     * @param productId
     * @param quantity
     * @return
     */
    int decreStore(@Param("productId") Integer productId, @Param("quantity") Integer quantity);
    
    /**
     * 根据货品id和减少数量更新货品库存
     * @param productId
     * @param quantity
     * @return
     */
    int addStock(@Param("productId") Integer productId, @Param("stockNum") Integer stockNum);
    
    /**
     * 根据商品ID查询所有货品（关注规格）
     * @param goodsId
     * @return
     */
    List<GoodsProductSpecDTO> getProductSpecByGoodsId(@Param("goodsId") Integer goodsId);
    
    void batchInsert(List list);
    
    void batchUpdate(List list);

    
    /**
     * @Title:  selectByGoodsIdList  
     * @Description:  TODO(根据商品id列表查询默认的货品列表)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-5-13 下午7:39:59  
     * @version 1.0.0 
     * @param @param goodsIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByGoodsIdList(List<Integer> goodsIdList);

    
    List<GoodsProductSpecDTO> getProductByCompanyId(@Param("companyId") Integer companyId,@Param("cateId") Integer cateId);
    
    List<Product> findProductByIds(Map<String,Object> params);
    
    /**
     * @Title:  selectByGoodsIdListAndSpecItem  
     * @Description:  TODO(根据商品ID列表和分店查询货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-5-25 下午6:10:47  
     * @version 1.0.0 
     * @param @param goodsIdList
     * @param @param specItem
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByGoodsIdListAndSpecItem(@Param("list")List<Integer> goodsIdList, @Param("specItem")String specItem);

    /**
     * @Title:  selectByProductIdList  
     * @Description:  TODO(根据货品id集合查询货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-5-27 下午7:28:50  
     * @version 1.0.0 
     * @param @param goodsIdList
     * @param @param specItem
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByProductIdList(List<Integer> productIdList);
    
    /**
     * @Title:  selectByGoodsId  
     * @Description:  TODO(根据商品id查询货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-12 上午10:29:17  
     * @version 1.0.0 
     * @param @param goodsId
     * @param @return
     * @return List<ProductImgDTO>  返回类型 
     * @throws
     */
    List<ProductImgDTO> selectByGoodsId(Integer goodsId);
    
    /**
     * @Title:  updateMarketable  
     * @Description:  TODO(更新货品上下架)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-17 上午10:30:23  
     * @version 1.0.0 
     * @param @param record
     * @param @param example
     * @param @return
     * @return int  返回类型 
     * @throws
     */
    int updateMarketable(@Param("productId") Integer productId, @Param("marketable") String marketable);
    
    List<Integer> findProductByGoodsId(Integer goodsId);
    //批量删除
    void batchDelete(List<Integer> ids);
    
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据货品id列表查询货品，不过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByProductIds(List<Integer> productIdList);
    
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据货品id列表查询货品，过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByProductIds2(List<Integer> productIdList);
    
 
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据参数查询货品，不过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByParams(@Param("catIdList") List<Integer> catIdList,
			@Param("brandIdList") List<Integer> brandIdList, @Param("goodsIdList") List<Integer> goodsIdList,
			@Param("tagList") List<String> tagList, @Param("priceFrom") BigDecimal priceFrom, 
			@Param("priceTo") BigDecimal priceTo, @Param("escapeGoodsId") Integer escapeGoodsId);
   
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据参数查询货品，过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    List<ProductWithBLOBs> selectByParams2(@Param("catIdList") List<Integer> catIdList,
			@Param("brandIdList") List<Integer> brandIdList, @Param("goodsIdList") List<Integer> goodsIdList,
			@Param("tagList") List<String> tagList, @Param("priceFrom") BigDecimal priceFrom, 
			@Param("priceTo") BigDecimal priceTo, @Param("escapeGoodsId") Integer escapeGoodsId);
    
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据货品id查询总价，不过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    Double selectSumPriceByProductIds(List<Integer> productIdList);
    
    /**
     * @Title:  selectByProductIds  
     * @Description:  TODO(根据参数查询总价，不过滤失效货品)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-6-26 下午3:34:21  
     * @version 1.0.0 
     * @param @param productIdList
     * @param @return
     * @return List<ProductWithBLOBs>  返回类型 
     * @throws
     */
    Double selectSumPriceByParams(@Param("catIdList") List<Integer> catIdList,
			@Param("brandIdList") List<Integer> brandIdList, @Param("goodsIdList") List<Integer> goodsIdList,
			@Param("tagList") List<String> tagList, @Param("priceFrom") BigDecimal priceFrom, 
			@Param("priceTo") BigDecimal priceTo, @Param("escapeGoodsId") Integer escapeGoodsId);
    
    /**
     * @Title:  selectProductCompanyById  
     * @Description:  TODO(根据货品id查询货品和集团)  
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
     * @date 2015-7-2 下午3:32:49  
     * @version 1.0.0 
     * @param @param productId
     * @param @return
     * @return ProductWithBLOBs  返回类型 
     * @throws
     */
    ProductWithBLOBs selectProductCompanyById(Integer productId);
}