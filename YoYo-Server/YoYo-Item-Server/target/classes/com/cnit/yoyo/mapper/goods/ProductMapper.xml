<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cnit.yoyo.dao.goods.ProductMapper">
	<resultMap id="BaseResultMap" type="com.cnit.yoyo.model.goods.Product">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		<id column="product_id" property="productId" jdbcType="INTEGER" />
		<result column="goods_id" property="goodsId" jdbcType="INTEGER" />
		<result column="barcode" property="barcode" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="bn" property="bn" jdbcType="VARCHAR" />
		<result column="price" property="price" jdbcType="DECIMAL" />
		<result column="cost" property="cost" jdbcType="DECIMAL" />
		<result column="mktprice" property="mktprice" jdbcType="DECIMAL" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="weight" property="weight" jdbcType="DECIMAL" />
		<result column="unit" property="unit" jdbcType="VARCHAR" />
		<result column="store" property="store" jdbcType="DECIMAL" />
		<result column="store_place" property="storePlace" jdbcType="VARCHAR" />
		<result column="freez" property="freez" jdbcType="INTEGER" />
		<result column="goods_type" property="goodsType" jdbcType="VARCHAR" />
		<result column="last_modify" property="lastModify" jdbcType="TIMESTAMP" />
		<result column="uptime" property="uptime" jdbcType="TIMESTAMP" />
		<result column="disabled" property="disabled" jdbcType="VARCHAR" />
		<result column="marketable" property="marketable" jdbcType="VARCHAR" />
		<result column="picture_path" property="picturePath" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.cnit.yoyo.model.goods.ProductWithBLOBs"
		extends="BaseResultMap">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		<result column="spec_info" property="specInfo" jdbcType="LONGVARCHAR" />
		<result column="spec_desc" property="specDesc" jdbcType="LONGVARCHAR" />
		<result column="limit_goodsdown" property="limitGoodsdown" jdbcType="VARCHAR" />
		<result column="limit_store" property="limitStore" jdbcType="VARCHAR" />
		<result column="limit_storedown" property="limitStoredown" jdbcType="VARCHAR" />
		<result column="store_shopstatus" property="storeShopstatus" jdbcType="VARCHAR" />
		<result column="store_status" property="storeStatus" jdbcType="VARCHAR" />
		<result column="store_disabled" property="storeDisabled" jdbcType="VARCHAR" />
		<result column="COMPANY_ID" jdbcType="INTEGER" property="companyId" />
	</resultMap>
	<resultMap id="ProductImgDTO" type="com.cnit.yoyo.model.goods.dto.ProductImgDTO"
		extends="ResultMapWithBLOBs">
		<result column="store_id" property="storeId" jdbcType="INTEGER" />
		<result column="car_id" property="carId"/>
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		product_id, goods_id, barcode, title, bn, price, cost, mktprice, name,
		weight, unit,
		store,
		store_place, freez, goods_type, last_modify,
		uptime, disabled,
		marketable,picture_path
	</sql>
	<sql id="Blob_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		spec_info, spec_desc
	</sql>
	<select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.cnit.yoyo.model.goods.ProductExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		select
		<if test="distinct">
			distinct
		</if>
		'false' as QUERYID,
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from t_products
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByExample" resultMap="BaseResultMap" parameterType="com.cnit.yoyo.model.goods.ProductExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		select
		<if test="distinct">
			distinct
		</if>
		'false' as QUERYID,
		<include refid="Base_Column_List" />
		from t_products
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from t_products
		where product_id = #{productId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		delete from t_products
		where product_id = #{productId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.cnit.yoyo.model.goods.ProductExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		delete from t_products
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.cnit.yoyo.model.goods.ProductWithBLOBs">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		insert into t_products (product_id, goods_id, barcode,
		title, bn,
		price, cost,
		mktprice, name,
		weight,
		unit, store, store_place,
		freez,
		goods_type, last_modify,
		uptime, disabled,
		marketable,picture_path,
		spec_info,
		spec_desc)
		values (#{productId,jdbcType=INTEGER},
		#{goodsId,jdbcType=INTEGER},
		#{barcode,jdbcType=VARCHAR},
		#{title,jdbcType=VARCHAR},
		#{bn,jdbcType=VARCHAR},
		#{price,jdbcType=DECIMAL},
		#{cost,jdbcType=DECIMAL},
		#{mktprice,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR},
		#{weight,jdbcType=DECIMAL},
		#{unit,jdbcType=VARCHAR},
		#{store,jdbcType=DECIMAL},
		#{storePlace,jdbcType=VARCHAR},
		#{freez,jdbcType=INTEGER}, #{goodsType,jdbcType=VARCHAR},
		#{lastModify,jdbcType=TIMESTAMP},
		#{uptime,jdbcType=TIMESTAMP},
		#{disabled,jdbcType=VARCHAR},
		#{marketable,jdbcType=VARCHAR},#{picturePath,jdbcType=VARCHAR},
		#{specInfo,jdbcType=LONGVARCHAR},
		#{specDesc,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.cnit.yoyo.model.goods.ProductWithBLOBs"
		keyProperty="productId" useGeneratedKeys="true">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		insert into t_products
		<trim prefix="(" suffix=")" suffixOverrides=",">

			<if test="goodsId != null">
				goods_id,
			</if>
			<if test="barcode != null">
				barcode,
			</if>
			<if test="title != null">
				title,
			</if>
			<if test="bn != null">
				bn,
			</if>
			<if test="price != null">
				price,
			</if>
			<if test="cost != null">
				cost,
			</if>
			<if test="mktprice != null">
				mktprice,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="weight != null">
				weight,
			</if>
			<if test="unit != null">
				unit,
			</if>
			<if test="store != null">
				store,
			</if>
			<if test="storePlace != null">
				store_place,
			</if>
			<if test="freez != null">
				freez,
			</if>
			<if test="goodsType != null">
				goods_type,
			</if>
			<if test="lastModify != null">
				last_modify,
			</if>
			<if test="uptime != null">
				uptime,
			</if>
			<if test="disabled != null">
				disabled,
			</if>
			<if test="marketable != null">
				marketable,
			</if>
			<if test="picturePath != null">
				picture_path,
			</if>
			<if test="specInfo != null">
				spec_info,
			</if>
			<if test="specDesc != null">
				spec_desc,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">

			<if test="goodsId != null">
				#{goodsId,jdbcType=INTEGER},
			</if>
			<if test="barcode != null">
				#{barcode,jdbcType=VARCHAR},
			</if>
			<if test="title != null">
				#{title,jdbcType=VARCHAR},
			</if>
			<if test="bn != null">
				#{bn,jdbcType=VARCHAR},
			</if>
			<if test="price != null">
				#{price,jdbcType=DECIMAL},
			</if>
			<if test="cost != null">
				#{cost,jdbcType=DECIMAL},
			</if>
			<if test="mktprice != null">
				#{mktprice,jdbcType=DECIMAL},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="weight != null">
				#{weight,jdbcType=DECIMAL},
			</if>
			<if test="unit != null">
				#{unit,jdbcType=VARCHAR},
			</if>
			<if test="store != null">
				#{store,jdbcType=DECIMAL},
			</if>
			<if test="storePlace != null">
				#{storePlace,jdbcType=VARCHAR},
			</if>
			<if test="freez != null">
				#{freez,jdbcType=INTEGER},
			</if>
			<if test="goodsType != null">
				#{goodsType,jdbcType=VARCHAR},
			</if>
			<if test="lastModify != null">
				#{lastModify,jdbcType=TIMESTAMP},
			</if>
			<if test="uptime != null">
				#{uptime,jdbcType=TIMESTAMP},
			</if>
			<if test="disabled != null">
				#{disabled,jdbcType=VARCHAR},
			</if>
			<if test="marketable != null">
				#{marketable,jdbcType=VARCHAR},
			</if>
			<if test="picturePath != null">
				#{picturePath,jdbcType=VARCHAR},
			</if>
			<if test="specInfo != null">
				#{specInfo,jdbcType=LONGVARCHAR},
			</if>
			<if test="specDesc != null">
				#{specDesc,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.cnit.yoyo.model.goods.ProductExample"
		resultType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		select count(*) from t_products
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		<set>
			<if test="record.productId != null">
				product_id = #{record.productId,jdbcType=INTEGER},
			</if>
			<if test="record.goodsId != null">
				goods_id = #{record.goodsId,jdbcType=INTEGER},
			</if>
			<if test="record.barcode != null">
				barcode = #{record.barcode,jdbcType=VARCHAR},
			</if>
			<if test="record.title != null">
				title = #{record.title,jdbcType=VARCHAR},
			</if>
			<if test="record.bn != null">
				bn = #{record.bn,jdbcType=VARCHAR},
			</if>
			<if test="record.price != null">
				price = #{record.price,jdbcType=DECIMAL},
			</if>
			<if test="record.cost != null">
				cost = #{record.cost,jdbcType=DECIMAL},
			</if>
			<if test="record.mktprice != null">
				mktprice = #{record.mktprice,jdbcType=DECIMAL},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.weight != null">
				weight = #{record.weight,jdbcType=DECIMAL},
			</if>
			<if test="record.unit != null">
				unit = #{record.unit,jdbcType=VARCHAR},
			</if>
			<if test="record.store != null">
				store = #{record.store,jdbcType=DECIMAL},
			</if>
			<if test="record.storePlace != null">
				store_place = #{record.storePlace,jdbcType=VARCHAR},
			</if>
			<if test="record.freez != null">
				freez = #{record.freez,jdbcType=INTEGER},
			</if>
			<if test="record.goodsType != null">
				goods_type = #{record.goodsType,jdbcType=VARCHAR},
			</if>
			<if test="record.lastModify != null">
				last_modify = #{record.lastModify,jdbcType=TIMESTAMP},
			</if>
			<if test="record.uptime != null">
				uptime = #{record.uptime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.disabled != null">
				disabled = #{record.disabled,jdbcType=VARCHAR},
			</if>
			<if test="record.marketable != null">
				marketable = #{record.marketable,jdbcType=VARCHAR},
			</if>
			<if test="record.picturePath != null">
				picture_path = #{record.picturePath,jdbcType=VARCHAR},
			</if>
			<if test="record.specInfo != null">
				spec_info = #{record.specInfo,jdbcType=LONGVARCHAR},
			</if>
			<if test="record.specDesc != null">
				spec_desc = #{record.specDesc,jdbcType=LONGVARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		set product_id =
		#{record.productId,jdbcType=INTEGER},
		goods_id =
		#{record.goodsId,jdbcType=INTEGER},
		barcode =
		#{record.barcode,jdbcType=VARCHAR},
		title =
		#{record.title,jdbcType=VARCHAR},
		bn = #{record.bn,jdbcType=VARCHAR},
		price =
		#{record.price,jdbcType=DECIMAL},
		cost =
		#{record.cost,jdbcType=DECIMAL},
		mktprice =
		#{record.mktprice,jdbcType=DECIMAL},
		name =
		#{record.name,jdbcType=VARCHAR},
		weight =
		#{record.weight,jdbcType=DECIMAL},
		unit =
		#{record.unit,jdbcType=VARCHAR},
		store =
		#{record.store,jdbcType=DECIMAL},
		store_place =
		#{record.storePlace,jdbcType=VARCHAR},
		freez =
		#{record.freez,jdbcType=INTEGER},
		goods_type =
		#{record.goodsType,jdbcType=VARCHAR},
		last_modify =
		#{record.lastModify,jdbcType=TIMESTAMP},
		uptime =
		#{record.uptime,jdbcType=TIMESTAMP},
		disabled =
		#{record.disabled,jdbcType=VARCHAR},
		marketable =
		#{record.marketable,jdbcType=VARCHAR},
		picture_path =
		#{record.picturePath,jdbcType=VARCHAR},
		spec_info =
		#{record.specInfo,jdbcType=LONGVARCHAR},
		spec_desc =
		#{record.specDesc,jdbcType=LONGVARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		set product_id =
		#{record.productId,jdbcType=INTEGER},
		goods_id =
		#{record.goodsId,jdbcType=INTEGER},
		barcode =
		#{record.barcode,jdbcType=VARCHAR},
		title =
		#{record.title,jdbcType=VARCHAR},
		bn = #{record.bn,jdbcType=VARCHAR},
		price =
		#{record.price,jdbcType=DECIMAL},
		cost =
		#{record.cost,jdbcType=DECIMAL},
		mktprice =
		#{record.mktprice,jdbcType=DECIMAL},
		name =
		#{record.name,jdbcType=VARCHAR},
		weight =
		#{record.weight,jdbcType=DECIMAL},
		unit =
		#{record.unit,jdbcType=VARCHAR},
		store =
		#{record.store,jdbcType=DECIMAL},
		store_place =
		#{record.storePlace,jdbcType=VARCHAR},
		freez =
		#{record.freez,jdbcType=INTEGER},
		goods_type =
		#{record.goodsType,jdbcType=VARCHAR},
		last_modify =
		#{record.lastModify,jdbcType=TIMESTAMP},
		uptime =
		#{record.uptime,jdbcType=TIMESTAMP},
		disabled =
		#{record.disabled,jdbcType=VARCHAR},
		marketable =
		#{record.marketable,jdbcType=VARCHAR},
		picture_path =
		#{record.picturePath,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.cnit.yoyo.model.goods.ProductWithBLOBs">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		<set>
			<if test="goodsId != null">
				goods_id = #{goodsId,jdbcType=INTEGER},
			</if>
			<if test="barcode != null">
				barcode = #{barcode,jdbcType=VARCHAR},
			</if>
			<if test="title != null">
				title = #{title,jdbcType=VARCHAR},
			</if>
			<if test="bn != null">
				bn = #{bn,jdbcType=VARCHAR},
			</if>
			<if test="price != null">
				price = #{price,jdbcType=DECIMAL},
			</if>
			<if test="cost != null">
				cost = #{cost,jdbcType=DECIMAL},
			</if>
			<if test="mktprice != null">
				mktprice = #{mktprice,jdbcType=DECIMAL},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="weight != null">
				weight = #{weight,jdbcType=DECIMAL},
			</if>
			<if test="unit != null">
				unit = #{unit,jdbcType=VARCHAR},
			</if>
			<if test="store != null">
				store = #{store,jdbcType=DECIMAL},
			</if>
			<if test="storePlace != null">
				store_place = #{storePlace,jdbcType=VARCHAR},
			</if>
			<if test="freez != null">
				freez = #{freez,jdbcType=INTEGER},
			</if>
			<if test="goodsType != null">
				goods_type = #{goodsType,jdbcType=VARCHAR},
			</if>
			<if test="lastModify != null">
				last_modify = #{lastModify,jdbcType=TIMESTAMP},
			</if>
			<if test="uptime != null">
				uptime = #{uptime,jdbcType=TIMESTAMP},
			</if>
			<if test="disabled != null">
				disabled = #{disabled,jdbcType=VARCHAR},
			</if>
			<if test="marketable != null">
				marketable = #{marketable,jdbcType=VARCHAR},
			</if>
			<if test="picturePath != null">
				picture_path = #{picturePath,jdbcType=VARCHAR},
			</if>
			<if test="specInfo != null">
				spec_info = #{specInfo,jdbcType=LONGVARCHAR},
			</if>
			<if test="specDesc != null">
				spec_desc = #{specDesc,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where product_id = #{productId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.cnit.yoyo.model.goods.ProductWithBLOBs">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		set goods_id = #{goodsId,jdbcType=INTEGER},
		barcode =
		#{barcode,jdbcType=VARCHAR},
		title = #{title,jdbcType=VARCHAR},
		bn =
		#{bn,jdbcType=VARCHAR},
		price = #{price,jdbcType=DECIMAL},
		cost =
		#{cost,jdbcType=DECIMAL},
		mktprice = #{mktprice,jdbcType=DECIMAL},
		name
		=
		#{name,jdbcType=VARCHAR},
		weight = #{weight,jdbcType=DECIMAL},
		unit =
		#{unit,jdbcType=VARCHAR},
		store
		= #{store,jdbcType=DECIMAL},
		store_place = #{storePlace,jdbcType=VARCHAR},
		freez =
		#{freez,jdbcType=INTEGER},
		goods_type = #{goodsType,jdbcType=VARCHAR},
		last_modify =
		#{lastModify,jdbcType=TIMESTAMP},
		uptime =
		#{uptime,jdbcType=TIMESTAMP},
		disabled =
		#{disabled,jdbcType=VARCHAR},
		marketable = #{marketable,jdbcType=VARCHAR},
		picture_path =
		#{picturePath,jdbcType=VARCHAR},
		spec_info =
		#{specInfo,jdbcType=LONGVARCHAR},
		spec_desc =
		#{specDesc,jdbcType=LONGVARCHAR}
		where product_id =
		#{productId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.cnit.yoyo.model.goods.Product">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. 
			This element was generated on Fri Apr 10 13:22:39 CST 2015. -->
		update t_products
		set goods_id = #{goodsId,jdbcType=INTEGER},
		barcode =
		#{barcode,jdbcType=VARCHAR},
		title = #{title,jdbcType=VARCHAR},
		bn =
		#{bn,jdbcType=VARCHAR},
		price = #{price,jdbcType=DECIMAL},
		cost =
		#{cost,jdbcType=DECIMAL},
		mktprice = #{mktprice,jdbcType=DECIMAL},
		name
		=
		#{name,jdbcType=VARCHAR},
		weight = #{weight,jdbcType=DECIMAL},
		unit =
		#{unit,jdbcType=VARCHAR},
		store
		= #{store,jdbcType=DECIMAL},
		store_place = #{storePlace,jdbcType=VARCHAR},
		freez =
		#{freez,jdbcType=INTEGER},
		goods_type = #{goodsType,jdbcType=VARCHAR},
		last_modify =
		#{lastModify,jdbcType=TIMESTAMP},
		uptime =
		#{uptime,jdbcType=TIMESTAMP},
		disabled =
		#{disabled,jdbcType=VARCHAR},
		marketable = #{marketable,jdbcType=VARCHAR},
		picture_path =
		#{picturePath,jdbcType=VARCHAR}
		where product_id =
		#{productId,jdbcType=INTEGER}
	</update>
	<!-- 通过货品编号进行判断是否存在 -->
	<select id="findProductByBn" resultType="java.lang.Integer" parameterType="map">
		select count(product_id) from t_products where disabled="0"
		and bn in
		<foreach collection="bns" item="bn" index="index" open="(" close=")" separator=",">
			#{bn}
		</foreach>
		<if test="productId != null">
			and product_id = #{productId,jdbcType=INTEGER}
		</if>
	</select>
	<select id="selectBySpecInfoAndGoodsId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_products p
		where p.goods_id=#{goodsId,jdbcType=INTEGER}
		<choose>
			<when test="specInfo != null">and p.spec_info=#{specInfo,jdbcType=VARCHAR}</when>
			<otherwise>and p.spec_info is null</otherwise>
		</choose>
	</select>
	<update id="decreStore">
		<!-- update t_products
		set store = store -
		#{quantity,jdbcType=INTEGER}
		where product_id
		=
		#{productId,jdbcType=INTEGER} -->
		update t_products
		set store = IF(store - #{quantity,jdbcType=INTEGER} > 0, store - #{quantity,jdbcType=INTEGER}, 0)  
		where product_id
		=
		#{productId,jdbcType=INTEGER}
	</update>
	
	<update id="addStock">
		update t_products set store = store + #{stockNum,jdbcType=INTEGER} where product_id = #{productId,jdbcType=INTEGER}
	</update>
	
	<resultMap id="ProductSpecMap" type="com.cnit.yoyo.model.goods.dto.GoodsProductSpecDTO">
		<id column="product_id" property="productId" jdbcType="INTEGER" />
		<result column="bn" property="bn" jdbcType="VARCHAR" />
		<result column="price" property="price" jdbcType="DECIMAL" />
		<result column="cost" property="cost" jdbcType="DECIMAL" />
		<result column="mktprice" property="mktprice" jdbcType="DECIMAL" />
		<result column="store" property="store" jdbcType="DECIMAL" />
		<result column="store_place" property="storePlace" jdbcType="VARCHAR" />
		<result column="disabled" property="disabled" jdbcType="VARCHAR" />
		<result column="marketable" property="marketable" jdbcType="VARCHAR" />
		<result column="spec_info" property="specInfo" jdbcType="LONGVARCHAR" />
		<result column="spec_desc" property="specDesc" jdbcType="LONGVARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />

		<collection property="pictures" ofType="com.cnit.yoyo.model.goods.Picture" column="picture_id">
			<id column="picture_id" property="pictureId" jdbcType="BIGINT" />
			<result column="picture_path" property="picturePath" jdbcType="VARCHAR" />
			<result column="company_id" property="companyId" jdbcType="BIGINT" />
			<result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
		</collection>
	</resultMap>



	<select id="getProductSpecByGoodsId" resultMap="ProductSpecMap" parameterType="java.lang.Integer">
		<!-- 查询商品下所有的货品（主要用于编辑商品货品信息，注重规格） -->
		SELECT T.PRODUCT_ID, T.BN, T.PRICE, T.COST, T.MKTPRICE, T.STORE, T.STORE_PLACE,T.SPEC_INFO,
		T.SPEC_DESC, T.DISABLED, T.MARKETABLE
		,T_PICTURE.* FROM T_PRODUCTS T LEFT JOIN
		T_GOODS_PRODUC_PIC_SHIP TSHIP ON T.PRODUCT_ID=TSHIP.PRODUCT_ID LEFT JOIN T_PICTURE ON
		T_PICTURE.PICTURE_ID = TSHIP.PICTURE_ID
		WHERE T.GOODS_ID = #{goodsId,jdbcType=INTEGER} and T.disabled='0'
	</select>
	<insert id="batchInsert" parameterType="java.util.List">
		<!-- 批量插入 -->
		insert into t_products (goods_id, barcode,title, bn,price, cost,mktprice, name, weight,unit,
		store, store_place,
		freez,goods_type, last_modify,uptime, disabled,
		marketable,picture_path,spec_info,spec_desc)
		<foreach collection="list" index="index" item="item" separator="union all">
			select #{item.goodsId,jdbcType=INTEGER},
			#{item.barcode,jdbcType=VARCHAR},#{item.title,jdbcType=VARCHAR},#{item.bn,jdbcType=VARCHAR}
			,#{item.price,jdbcType=DECIMAL},#{item.cost,jdbcType=DECIMAL},#{item.mktprice,jdbcType=DECIMAL}
			,#{item.name,jdbcType=VARCHAR},#{item.weight,jdbcType=DECIMAL},#{item.unit,jdbcType=VARCHAR}
			,#{item.store,jdbcType=DECIMAL},#{item.storePlace,jdbcType=VARCHAR},#{item.freez,jdbcType=INTEGER}
			,#{item.goodsType,jdbcType=VARCHAR},#{item.lastModify,jdbcType=TIMESTAMP}
			,#{item.uptime,jdbcType=TIMESTAMP},#{item.disabled,jdbcType=VARCHAR},#{item.marketable,jdbcType=VARCHAR},#{item.picturePath,jdbcType=VARCHAR}
			,#{item.specInfo,jdbcType=LONGVARCHAR}, #{item.specDesc,jdbcType=LONGVARCHAR} from dual
		</foreach>
	</insert>
	<update id="batchUpdate" parameterType="java.util.List">
		<foreach collection="list" index="index" item="item" open="" close="" separator=";">
			update t_products
			<set>
				<if test="item.goodsId != null">
					goods_id = #{item.goodsId,jdbcType=INTEGER},
				</if>
				<if test="item.barcode != null">
					barcode = #{item.barcode,jdbcType=VARCHAR},
				</if>
				<if test="item.title != null">
					title = #{item.title,jdbcType=VARCHAR},
				</if>
				<if test="item.bn != null">
					bn = #{item.bn,jdbcType=VARCHAR},
				</if>
				<if test="item.price != null">
					price = #{item.price,jdbcType=DECIMAL},
				</if>
				<if test="item.cost != null">
					cost = #{item.cost,jdbcType=DECIMAL},
				</if>
				<if test="item.mktprice != null">
					mktprice = #{item.mktprice,jdbcType=DECIMAL},
				</if>
				<if test="item.name != null">
					name = #{item.name,jdbcType=VARCHAR},
				</if>
				<if test="item.weight != null">
					weight = #{item.weight,jdbcType=DECIMAL},
				</if>
				<if test="item.unit != null">
					unit = #{item.unit,jdbcType=VARCHAR},
				</if>
				<if test="item.store != null">
					store = #{item.store,jdbcType=DECIMAL},
				</if>
				<if test="item.storePlace != null">
					store_place = #{item.storePlace,jdbcType=VARCHAR},
				</if>
				<if test="item.freez != null">
					freez = #{item.freez,jdbcType=INTEGER},
				</if>
				<if test="item.goodsType != null">
					goods_type = #{item.goodsType,jdbcType=VARCHAR},
				</if>
				<if test="item.lastModify != null">
					last_modify = #{item.lastModify,jdbcType=TIMESTAMP},
				</if>
				<if test="item.uptime != null">
					uptime = #{item.uptime,jdbcType=TIMESTAMP},
				</if>
				<if test="item.disabled != null">
					disabled = #{item.disabled,jdbcType=VARCHAR},
				</if>
				<if test="item.marketable != null">
					marketable = #{item.marketable,jdbcType=VARCHAR},
				</if>
				<if test="item.picturePath != null">
					picture_path = #{item.picturePath,jdbcType=VARCHAR},
				</if>
				<if test="item.specInfo != null">
					spec_info = #{item.specInfo,jdbcType=LONGVARCHAR},
				</if>
				<if test="item.specDesc != null">
					spec_desc = #{item.specDesc,jdbcType=LONGVARCHAR},
				</if>
			</set>
			where product_id = #{item.productId,jdbcType=INTEGER}
		</foreach>
	</update>


	<select id="selectByGoodsIdList" resultMap="ResultMapWithBLOBs">
		select p.*, g.company_id
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		left join 
			t_business_storemanger s on s.store_id = if(substring_index(p.spec_desc,'|分店:',-1) = p.spec_desc or p.spec_desc is null or p.spec_desc ='', g.store_id, substring_index(substring_index(p.spec_desc,'|分店:',-1),'|',1))
		where (p.disabled !=1 or p.disabled is null) and (g.disabled !=1 or g.disabled is null) and p.goods_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
		and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
		and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null)
		group by p.goods_id
	</select>




	<!-- 查询指定店铺下所有的货品 -->
	<select id="getProductByCompanyId" resultMap="ProductSpecMap" >

		SELECT T.PRODUCT_ID, T.BN,T.name, T.PRICE,T.STORE,T.SPEC_INFO, T.SPEC_DESC FROM T_PRODUCTS T JOIN
		t_goods on T.GOODS_ID=t_goods.GOODS_ID
		WHERE t_goods.disabled='0' and t_goods.COMPANY_ID=#{companyId,jdbcType=INTEGER} and t_goods.MARKETABLE_ALLOW='0' and T.disabled='0'
		<if test="cateId!=null and cateId!=0">
			and t_goods.CAT_ID=#{cateId,jdbcType=INTEGER}
		</if>
	</select>

	<!-- 查询指定店铺下指定的货品 -->
	<select id="findProductByIds" resultMap="BaseResultMap">
		select
		T.PRODUCT_ID, T.BN,T.name, T.PRICE,T.STORE,T.SPEC_INFO, T.SPEC_DESC
		from T_PRODUCTS T JOIN t_goods on
		T.GOODS_ID=t_goods.GOODS_ID
		where t_goods.COMPANY_ID=#{companyId}
		and product_id in
		<foreach collection="idsArray" item="id" index="index" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</select>
	
	<select id="selectByGoodsIdListAndSpecItem" resultMap="ResultMapWithBLOBs">
		select p.*
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id 
		left join 
			t_business_storemanger s on s.store_id = if(substring_index(p.spec_desc,'|分店:',-1) = p.spec_desc or p.spec_desc is null or p.spec_desc ='', g.store_id, substring_index(substring_index(p.spec_desc,'|分店:',-1),'|',1))
		where p.goods_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
		and p.spec_desc like CONCAT('%', #{specItem,jdbcType=VARCHAR},'%') 
		and (g.disabled !=1 or g.disabled is null) and (p.disabled !=1 or p.disabled is null)
		and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
		and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null)
		group by p.goods_id
	</select>
	
	<select id="selectByProductIdList" resultMap="ResultMapWithBLOBs">
		<!-- select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from t_products
		where product_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach> -->
		
		select p.*
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		left join 
			t_business_storemanger s on s.store_id = if(substring_index(p.spec_desc,'|分店:',-1) = p.spec_desc or p.spec_desc is null or p.spec_desc ='', g.store_id, substring_index(substring_index(p.spec_desc,'|分店:',-1),'|',1))
		where (p.disabled !=1 or p.disabled is null) and (g.disabled !=1 or g.disabled is null)
			and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
			and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null) 
			and p.product_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	

	<select id="selectByGoodsId" resultMap="ProductImgDTO">
		SELECT
			p.product_id,
			p.goods_id,
			p.barcode,
			p.title,
			p.bn,
			p.price,
			p.cost,
			p.mktprice,
			p.NAME,
			p.weight,
			p.unit,
			p.store,
			p.store_place,
			p.freez,
			p.goods_type,
			p.spec_desc,
			p.spec_info,
			p.last_modify,
			p.uptime,
			p.disabled,
			p.marketable,
			p.picture_path,
			g.car_id,
			s.store_id,
			s.limit_goodsdown,
			s.limit_store,
			s.limit_storedown,
			s.shopstatus AS store_shopstatus,
			s. STATUS AS store_status,
			s.disabled AS store_disabled
		FROM
			t_products p
		LEFT JOIN t_goods g ON p.goods_id = g.goods_id
		LEFT JOIN t_business_storemanger s ON s.store_id =
		IF (
			substring_index(p.spec_desc, '|分店:' ,- 1) = p.spec_desc
			OR p.spec_desc IS NULL
			OR p.spec_desc = '',
			g.store_id,
			substring_index(
				substring_index(p.spec_desc, '|分店:' ,- 1),
				'|',
				1
			)
		)
		where (p.disabled !=1 or p.disabled is null) and (g.disabled !=1 or g.disabled is null) and p.goods_id = #{goodsId}
			and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
			and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null)
	</select>

	<update id="updateMarketable">
		update t_products
		set marketable = #{marketable}
		where product_id = #{productId,jdbcType=INTEGER}
	</update>

	<!-- 根据商品id获得货品id集合 -->
	<select id="findProductByGoodsId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
		SELECT product_id from t_products where disabled='0' and goods_id=#{goodsId}
	</select>
	
	<!-- 批量删除 -->
	<update id="batchDelete">
		update t_products set disabled='1' where product_id in
		<foreach collection="list" open="(" close=")" index="index" item="item" separator=",">
			#{item}
		</foreach>
	</update>
	
	<select id="selectByProductIds" resultMap="ResultMapWithBLOBs">
		SELECT
			p.product_id,
			p.goods_id,
			p.barcode,
			p.title,
			p.bn,
			(case when g.CAR_ID>0 then p.cost ELSE p.price end)as price,	
			p.cost,
			p.mktprice,
			p. NAME,
			p.weight,
			p.unit,
			p.store,
			p.store_place,
			p.freez,
			p.goods_type,
			p.last_modify,
			p.uptime,
			p.disabled,
			p.marketable,		
		IF (
			p.picture_path IS NULL
			OR p.picture_path = '',
			g.mid_pic,
			p.picture_path
		) AS picture_path,
		 p.spec_info,
		 p.spec_desc
		FROM
			t_products p
		LEFT JOIN t_goods g ON p.goods_id = g.goods_id
		where p.product_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	
	<select id="selectByProductIds2" resultMap="ResultMapWithBLOBs">
		select p.product_id, p.goods_id, p.barcode, p.title, p.bn, p.price, p.cost, p.mktprice, p.name,
		p.weight, p.unit, p.store, p.store_place, p.freez, p.goods_type, p.last_modify,
		p.uptime, p.disabled, p.marketable,if(p.picture_path is null or p.picture_path = '',g.mid_pic,p.picture_path) as picture_path, 
		p.spec_info, p.spec_desc, s.limit_goodsdown, s.limit_store, s.limit_storedown, s.shopstatus as store_shopstatus,
		s.status as store_status, s.disabled as store_disabled
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		left join t_business_storemanger s on s.store_id = if(substring_index(p.spec_desc,'|分店:',-1) = p.spec_desc or p.spec_desc is null or p.spec_desc ='', g.store_id, substring_index(substring_index(p.spec_desc,'|分店:',-1),'|',1))
		where (p.disabled !=1 or p.disabled is null) and (g.disabled !=1 or g.disabled is null) 
			and (p.marketable !=0 or p.marketable is null) and (g.disabled !=0 or g.disabled is null)
			and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
			and (s.limit_goodsdown !=1 or s.limit_goodsdown is null)
			and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null)
			and p.product_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	
	<select id="selectByParams" resultMap="ResultMapWithBLOBs">
		select p.product_id, p.goods_id, p.barcode, p.title, p.bn, p.price, p.cost, p.mktprice, p.name,
		p.weight, p.unit, p.store, p.store_place, p.freez, p.goods_type, p.last_modify,
		p.uptime, p.disabled, p.marketable,if(p.picture_path is null or p.picture_path = '',g.mid_pic,p.picture_path) as picture_path, p.spec_info, p.spec_desc
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		where 1=1 
		<if test="catIdList!=null">
			and g.cat_id in
			<foreach item="item" index="index" collection="catIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="brandIdList!=null">
			and g.brand_id in
			<foreach item="item" index="index" collection="brandIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="goodsIdList!=null">
			and g.goods_id in
			<foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="tagList!=null">
			and
			<foreach item="item" index="index" collection="tagList" open="(" separator="or" close=")">
				<!-- <bind name="pattern" value="'%' + item + '%'" /> tags like #{pattern} -->
				g.tags like CONCAT('%', #{item},'%')
			</foreach>
		</if>
		<if test="priceFrom != null">
			and p.price >= #{priceFrom}
		</if>
		<if test="priceTo != null">
			and #{priceTo} >= p.price
		</if>
		<if test="escapeGoodsId != null">
			and g.goods_id != #{escapeGoodsId}
		</if>
		group by g.goods_id
	</select>
	<select id="selectByParams2" resultMap="ResultMapWithBLOBs">
		select p.product_id, p.goods_id, p.barcode, p.title, p.bn, p.price, p.cost, p.mktprice, p.name,
		p.weight, p.unit, p.store, p.store_place, p.freez, p.goods_type, p.last_modify,
		p.uptime, p.disabled, p.marketable,
		if(p.picture_path is null or p.picture_path = '',g.mid_pic,p.picture_path) as picture_path, 
		p.spec_info, p.spec_desc, s.limit_goodsdown, s.limit_store, s.limit_storedown, s.shopstatus as store_shopstatus,
		s.status as store_status, s.disabled as store_disabled
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		left join t_business_storemanger s on s.store_id = if(substring_index(p.spec_desc,'|分店:',-1) = p.spec_desc or p.spec_desc is null or p.spec_desc ='', g.store_id, substring_index(substring_index(p.spec_desc,'|分店:',-1),'|',1))
		where (p.disabled !=1 or p.disabled is null) and (g.disabled !=1 or g.disabled is null) 
			and (p.marketable !=0 or p.marketable is null) and (g.disabled !=0 or g.disabled is null)
			and (s.limit_store !=1 or s.limit_store is null) and (s.limit_storedown !=1 or s.limit_storedown is null)
			and (s.limit_goodsdown !=1 or s.limit_goodsdown is null)
			and (s.shopstatus !=1 or s.shopstatus is null) and (s.status !=1 or s.status is null) and (s.disabled !=1 or s.disabled is null)
		<if test="catIdList!=null">
			and g.cat_id in
			<foreach item="item" index="index" collection="catIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="brandIdList!=null">
			and g.brand_id in
			<foreach item="item" index="index" collection="brandIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="goodsIdList!=null">
			and g.goods_id in
			<foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="tagList!=null">
			and
			<foreach item="item" index="index" collection="tagList" open="(" separator="or" close=")">
				<!-- <bind name="pattern" value="'%' + item + '%'" /> tags like #{pattern} -->
				g.tags like CONCAT('%', #{item},'%')
			</foreach>
		</if>
		<if test="priceFrom != null">
			and p.price >= #{priceFrom}
		</if>
		<if test="priceTo != null">
			and #{priceTo} >= p.price
		</if>
		<if test="escapeGoodsId != null">
			and g.goods_id != #{escapeGoodsId}
		</if>
		group by g.goods_id
	</select>
	
	<select id="selectSumPriceByProductIds" resultType="java.lang.Double">
		select ifnull(sum(p.price),0)
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		where p.product_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	
	<select id="selectSumPriceByParams" resultType="java.lang.Double">
		select ifnull(sum(price),0) from(
			select p.price
		
			from t_products p
			left join t_goods g on p.goods_id = g.goods_id
			where 1=1 
			<if test="catIdList!=null">
				and g.cat_id in
				<foreach item="item" index="index" collection="catIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="brandIdList!=null">
				and g.brand_id in
				<foreach item="item" index="index" collection="brandIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="goodsIdList!=null">
				and g.goods_id in
				<foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="tagList!=null">
				and
				<foreach item="item" index="index" collection="tagList" open="(" separator="or" close=")">
					<!-- <bind name="pattern" value="'%' + item + '%'" /> tags like #{pattern} -->
					g.tags like CONCAT('%', #{item},'%')
				</foreach>
			</if>
			<if test="priceFrom != null">
				and p.price >= #{priceFrom}
			</if>
			<if test="priceTo != null">
				and #{priceTo} >= p.price
			</if>
			<if test="escapeGoodsId != null">
				and g.goods_id != #{escapeGoodsId}
			</if>
			group by g.goods_id 
		) price
	</select>
	
	<select id="selectProductCompanyById" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
		select p.*, g.company_id
		from t_products p
		left join t_goods g on p.goods_id = g.goods_id
		where product_id = #{productId,jdbcType=INTEGER}
	</select>

</mapper>