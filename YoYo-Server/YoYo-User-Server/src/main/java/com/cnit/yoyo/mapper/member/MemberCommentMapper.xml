<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cnit.yoyo.dao.member.MemberCommentMapper">
  <resultMap id="BaseResultMap" type="com.cnit.yoyo.model.member.MemberComment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    <id column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="for_comment_id" jdbcType="INTEGER" property="forCommentId" />
    <result column="type_id" jdbcType="BIGINT" property="typeId" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="object_type" jdbcType="VARCHAR" property="objectType" />
    <result column="author_id" jdbcType="BIGINT" property="authorId" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="contact" jdbcType="VARCHAR" property="contact" />
    <result column="mem_read_status" jdbcType="INTEGER" property="memReadStatus" />
    <result column="adm_read_status" jdbcType="INTEGER" property="admReadStatus" />
    <result column="time" jdbcType="VARCHAR" property="time" />
    <result column="lastreply" jdbcType="VARCHAR" property="lastreply" />
    <result column="reply_name" jdbcType="VARCHAR" property="replyName" />
    <result column="inbox" jdbcType="INTEGER" property="inbox" />
    <result column="track" jdbcType="INTEGER" property="track" />
    <result column="has_sent" jdbcType="INTEGER" property="hasSent" />
    <result column="to_id" jdbcType="INTEGER" property="toId" />
    <result column="to_uname" jdbcType="VARCHAR" property="toUname" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="display" jdbcType="INTEGER" property="display" />
    <result column="gask_type" jdbcType="VARCHAR" property="gaskType" />
    <result column="p_index" jdbcType="TINYINT" property="pIndex" />
    <result column="disabled" jdbcType="INTEGER" property="disabled" />
    <result column="comments_type" jdbcType="VARCHAR" property="commentsType" />
    <result column="store_id" jdbcType="BIGINT" property="storeId" />
    <result column="company_id" jdbcType="BIGINT" property="companyId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    <result column="comment" jdbcType="LONGVARCHAR" property="comment" />
    <result column="addon" jdbcType="LONGVARCHAR" property="addon" />
  </resultMap>
  <resultMap extends="ResultMapWithBLOBs" id="CommentDetailDTO" type="com.cnit.yoyo.model.member.dto.MemberCommentDetailDTO">
    <result column="goods_point" jdbcType="INTEGER" property="goodsPoint" />
    <result column="member_lv_name" jdbcType="VARCHAR" property="memberLvName" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="createtime" jdbcType="VARCHAR" property="orderCreateTime" />
    <result column="reply_comment_id" jdbcType="INTEGER" property="replyCommentId" />
    <result column="reply_author" jdbcType="VARCHAR" property="replyAuthor" />
    <result column="reply_comment" jdbcType="VARCHAR" property="replyComment" />
    <result column="reply_time" jdbcType="VARCHAR" property="replyTime" />
  </resultMap>
  
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    comment_id, member_id, for_comment_id, type_id, product_id, order_id, object_type, 
    author_id, author, contact, mem_read_status, adm_read_status, time, lastreply, reply_name, 
    inbox, track, has_sent, to_id, to_uname, title, ip, display, gask_type, p_index, 
    disabled, comments_type, store_id,company_id
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    comment, addon
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_member_comments
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    delete from t_member_comments
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    insert into t_member_comments (comment_id, member_id, for_comment_id, 
      type_id, product_id, order_id, 
      object_type, author_id, author, 
      contact, mem_read_status, adm_read_status, 
      time, lastreply, reply_name, 
      inbox, track, has_sent, 
      to_id, to_uname, title, 
      ip, display, gask_type, 
      p_index, disabled, comments_type, 
      store_id,company_id, comment, addon
      )
    values (#{commentId,jdbcType=INTEGER}, #{memberId,jdbcType=INTEGER}, #{forCommentId,jdbcType=INTEGER}, 
      #{typeId,jdbcType=BIGINT}, #{productId,jdbcType=INTEGER}, #{orderId,jdbcType=BIGINT}, 
      #{objectType,jdbcType=VARCHAR}, #{authorId,jdbcType=BIGINT}, #{author,jdbcType=VARCHAR}, 
      #{contact,jdbcType=VARCHAR}, #{memReadStatus,jdbcType=INTEGER}, #{admReadStatus,jdbcType=INTEGER}, 
      #{time,jdbcType=VARCHAR}, #{lastreply,jdbcType=VARCHAR}, #{replyName,jdbcType=VARCHAR}, 
      #{inbox,jdbcType=INTEGER}, #{track,jdbcType=INTEGER}, #{hasSent,jdbcType=INTEGER}, 
      #{toId,jdbcType=INTEGER}, #{toUname,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, 
      #{ip,jdbcType=VARCHAR}, #{display,jdbcType=INTEGER}, #{gaskType,jdbcType=VARCHAR}, 
      #{pIndex,jdbcType=TINYINT}, #{disabled,jdbcType=INTEGER}, #{commentsType,jdbcType=VARCHAR}, 
      #{storeId,jdbcType=BIGINT},#{companyId,jdbcType=BIGINT}, #{comment,jdbcType=LONGVARCHAR}, #{addon,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    insert into t_member_comments
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="forCommentId != null">
        for_comment_id,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="objectType != null">
        object_type,
      </if>
      <if test="authorId != null">
        author_id,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="contact != null">
        contact,
      </if>
      <if test="memReadStatus != null">
        mem_read_status,
      </if>
      <if test="admReadStatus != null">
        adm_read_status,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="lastreply != null">
        lastreply,
      </if>
      <if test="replyName != null">
        reply_name,
      </if>
      <if test="inbox != null">
        inbox,
      </if>
      <if test="track != null">
        track,
      </if>
      <if test="hasSent != null">
        has_sent,
      </if>
      <if test="toId != null">
        to_id,
      </if>
      <if test="toUname != null">
        to_uname,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="display != null">
        display,
      </if>
      <if test="gaskType != null">
        gask_type,
      </if>
      <if test="pIndex != null">
        p_index,
      </if>
      <if test="disabled != null">
        disabled,
      </if>
      <if test="commentsType != null">
        comments_type,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="addon != null">
        addon,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="forCommentId != null">
        #{forCommentId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="objectType != null">
        #{objectType,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null">
        #{authorId,jdbcType=BIGINT},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="contact != null">
        #{contact,jdbcType=VARCHAR},
      </if>
      <if test="memReadStatus != null">
        #{memReadStatus,jdbcType=INTEGER},
      </if>
      <if test="admReadStatus != null">
        #{admReadStatus,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="lastreply != null">
        #{lastreply,jdbcType=VARCHAR},
      </if>
      <if test="replyName != null">
        #{replyName,jdbcType=VARCHAR},
      </if>
      <if test="inbox != null">
        #{inbox,jdbcType=INTEGER},
      </if>
      <if test="track != null">
        #{track,jdbcType=INTEGER},
      </if>
      <if test="hasSent != null">
        #{hasSent,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        #{toId,jdbcType=INTEGER},
      </if>
      <if test="toUname != null">
        #{toUname,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="display != null">
        #{display,jdbcType=INTEGER},
      </if>
      <if test="gaskType != null">
        #{gaskType,jdbcType=VARCHAR},
      </if>
      <if test="pIndex != null">
        #{pIndex,jdbcType=TINYINT},
      </if>
      <if test="disabled != null">
        #{disabled,jdbcType=INTEGER},
      </if>
      <if test="commentsType != null">
        #{commentsType,jdbcType=VARCHAR},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=LONGVARCHAR},
      </if>
      <if test="addon != null">
        #{addon,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    update t_member_comments
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="forCommentId != null">
        for_comment_id = #{forCommentId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="objectType != null">
        object_type = #{objectType,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null">
        author_id = #{authorId,jdbcType=BIGINT},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="contact != null">
        contact = #{contact,jdbcType=VARCHAR},
      </if>
      <if test="memReadStatus != null">
        mem_read_status = #{memReadStatus,jdbcType=INTEGER},
      </if>
      <if test="admReadStatus != null">
        adm_read_status = #{admReadStatus,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=VARCHAR},
      </if>
      <if test="lastreply != null">
        lastreply = #{lastreply,jdbcType=VARCHAR},
      </if>
      <if test="replyName != null">
        reply_name = #{replyName,jdbcType=VARCHAR},
      </if>
      <if test="inbox != null">
        inbox = #{inbox,jdbcType=INTEGER},
      </if>
      <if test="track != null">
        track = #{track,jdbcType=INTEGER},
      </if>
      <if test="hasSent != null">
        has_sent = #{hasSent,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        to_id = #{toId,jdbcType=INTEGER},
      </if>
      <if test="toUname != null">
        to_uname = #{toUname,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="display != null">
        display = #{display,jdbcType=INTEGER},
      </if>
      <if test="gaskType != null">
        gask_type = #{gaskType,jdbcType=VARCHAR},
      </if>
      <if test="pIndex != null">
        p_index = #{pIndex,jdbcType=TINYINT},
      </if>
      <if test="disabled != null">
        disabled = #{disabled,jdbcType=INTEGER},
      </if>
      <if test="commentsType != null">
        comments_type = #{commentsType,jdbcType=VARCHAR},
      </if>
      <if test="storeId != null">
        store_id = #{storeId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=BIGINT},
      </if>
      
      <if test="comment != null">
        comment = #{comment,jdbcType=LONGVARCHAR},
      </if>
      <if test="addon != null">
        addon = #{addon,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    update t_member_comments
    set member_id = #{memberId,jdbcType=INTEGER},
      for_comment_id = #{forCommentId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=BIGINT},
      product_id = #{productId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=BIGINT},
      object_type = #{objectType,jdbcType=VARCHAR},
      author_id = #{authorId,jdbcType=BIGINT},
      author = #{author,jdbcType=VARCHAR},
      contact = #{contact,jdbcType=VARCHAR},
      mem_read_status = #{memReadStatus,jdbcType=INTEGER},
      adm_read_status = #{admReadStatus,jdbcType=INTEGER},
      time = #{time,jdbcType=VARCHAR},
      lastreply = #{lastreply,jdbcType=VARCHAR},
      reply_name = #{replyName,jdbcType=VARCHAR},
      inbox = #{inbox,jdbcType=INTEGER},
      track = #{track,jdbcType=INTEGER},
      has_sent = #{hasSent,jdbcType=INTEGER},
      to_id = #{toId,jdbcType=INTEGER},
      to_uname = #{toUname,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      display = #{display,jdbcType=INTEGER},
      gask_type = #{gaskType,jdbcType=VARCHAR},
      p_index = #{pIndex,jdbcType=TINYINT},
      disabled = #{disabled,jdbcType=INTEGER},
      comments_type = #{commentsType,jdbcType=VARCHAR},
      store_id = #{storeId,jdbcType=BIGINT},
      company_id = #{companyId,jdbcType=BIGINT},
      comment = #{comment,jdbcType=LONGVARCHAR},
      addon = #{addon,jdbcType=LONGVARCHAR}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cnit.yoyo.model.member.MemberComment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 05 10:09:08 CST 2015.
    -->
    update t_member_comments
    set member_id = #{memberId,jdbcType=INTEGER},
      for_comment_id = #{forCommentId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=BIGINT},
      product_id = #{productId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=BIGINT},
      object_type = #{objectType,jdbcType=VARCHAR},
      author_id = #{authorId,jdbcType=BIGINT},
      author = #{author,jdbcType=VARCHAR},
      contact = #{contact,jdbcType=VARCHAR},
      mem_read_status = #{memReadStatus,jdbcType=INTEGER},
      adm_read_status = #{admReadStatus,jdbcType=INTEGER},
      time = #{time,jdbcType=VARCHAR},
      lastreply = #{lastreply,jdbcType=VARCHAR},
      reply_name = #{replyName,jdbcType=VARCHAR},
      inbox = #{inbox,jdbcType=INTEGER},
      track = #{track,jdbcType=INTEGER},
      has_sent = #{hasSent,jdbcType=INTEGER},
      to_id = #{toId,jdbcType=INTEGER},
      to_uname = #{toUname,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      display = #{display,jdbcType=INTEGER},
      gask_type = #{gaskType,jdbcType=VARCHAR},
      p_index = #{pIndex,jdbcType=TINYINT},
      disabled = #{disabled,jdbcType=INTEGER},
      comments_type = #{commentsType,jdbcType=VARCHAR},
      store_id = #{storeId,jdbcType=BIGINT},
      company_id = #{companyId,jdbcType=BIGINT}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  
  
  

  <resultMap id="MemberCommentListMap" type="com.cnit.yoyo.domain.member.MemberCommentDo">
		<result column="comment_id" jdbcType="INTEGER" property="commentId" />
		<result column="for_comment_id" jdbcType="INTEGER" property="forCommentId" />
		<result column="product_id" jdbcType="INTEGER" property="productId" />
		<result column="product_name" jdbcType="VARCHAR" property="goodName" />
		<result column="picture_path" jdbcType="VARCHAR" property="picturePath" />
		<result column="reply_name" jdbcType="VARCHAR" property="replyName" />
		<result column="ip" jdbcType="VARCHAR" property="IP" />
		<result column="lastreply" jdbcType="VARCHAR" property="lastreplyTime" />
		<result column="time" jdbcType="TIMESTAMP" property="time" />
		<result column="display" jdbcType="VARCHAR" property="display" />
		<result column="author" jdbcType="VARCHAR" property="author" />
		<result column="contact" jdbcType="VARCHAR" property="contact" />
		<result column="title" jdbcType="VARCHAR" property="title" />
		<result column="comment" jdbcType="VARCHAR" property="comment" />
		<result column="store_name" jdbcType="VARCHAR" property="storeName" />
		<result column="object_type" jdbcType="VARCHAR" property="objectType" />
		<result column="store_id" jdbcType="INTEGER" property="storeId" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="store_name" jdbcType="INTEGER" property="storeName" />
	</resultMap>
	
	<select id="findMemberAskByParam" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO" resultMap="MemberCommentListMap">
		select
			product.`name` product_name,
			product.product_id,
			product.picture_path,
			comments.comment_id,
			comments.lastreply,
			comments.ip,
			comments.time,
			comments.display,
			comments.author,
			comments.contact,
			comments.reply_name,
			comments.title,
			comments.`comment`,
			store.store_name
		from 
			t_member_comments comments 
		left join
			t_products product on comments.product_id = product.product_id
		LEFT JOIN
			t_business_storemanger store ON store.store_id=comments.store_id
		where
			comments.for_comment_id=0
		AND
			comments.disabled=0
		<if test="objectType != null">and comments.object_type=#{objectType,jdbcType=VARCHAR}</if>
		<if test="memberId != null"> and comments.member_id = #{memberId,jdbcType=INTEGER}</if>
		<if test="commentId != null"> and comments.comment_id = #{authorId,jdbcType=INTEGER}</if>
		<if test="productName != null and productName !=''"> AND product.`name` LIKE CONCAT('%', #{productName,jdbcType=VARCHAR},'%')</if>
		<if test="disPlay != null and disPlay != ''"> AND comments.display=#{disPlay}</if>
		<if test="memberName != null and memberName != ''"> AND comments.author LIKE CONCAT('%', #{memberName,jdbcType=VARCHAR},'%')</if>
		<if test="storeName != null and storeName !=''"> AND store.store_name LIKE CONCAT('%', #{storeName,jdbcType=VARCHAR},'%')</if>
		<if test="startTime !=null and startTime != ''">
			 <![CDATA[
		  	 	AND DATE_FORMAT(comments.time ,'%Y-%m-%d') >= DATE_FORMAT(#{startTime} ,'%Y-%m-%d')
		  	 ]]>
		</if>
		<if test="endTime !=null and endTime != ''">
			 <![CDATA[
		  	 	AND DATE_FORMAT(comments.time ,'%Y-%m-%d') <= DATE_FORMAT(#{endTime} ,'%Y-%m-%d')
		  	 ]]>
		</if>
		order by time desc
	</select>
	
	
	<resultMap id="CommentsDtoResultMap" type="com.cnit.yoyo.model.member.dto.MemberCommentDTO" extends="ResultMapWithBLOBs">
		<result column="reply_count" property="replyCount" jdbcType="INTEGER"/>
		<result column="bn" property="product.bn"/>
		<result column="product_id" property="product.productId"/>
		<result column="product_name" property="product.name"/>
		<result column="picture_path" property="product.picturePath"/>
		<result column="goods_id" property="product.goodsId"/>
		<result column="price" property="product.price"/>
		<result column="goods_id" property="product.goodsId"/>
		<result column="store_name" property="storeName"/>
		<result column="create_time" property="order.createtime"/>
		<result column="order_id" property="order.orderId"/>
		<collection property="replyComment" ofType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs">  
			<id column="reply_comment_comment_id" jdbcType="INTEGER" property="commentId" />
		    <result column="reply_comment_member_id" jdbcType="INTEGER" property="memberId" />
		    <result column="reply_comment_for_comment_id" jdbcType="INTEGER" property="forCommentId" />
		    <result column="reply_comment_type_id" jdbcType="BIGINT" property="typeId" />
		    <result column="reply_comment_product_id" jdbcType="INTEGER" property="productId" />
		    <result column="reply_comment_order_id" jdbcType="BIGINT" property="orderId" />
		    <result column="reply_comment_object_type" jdbcType="VARCHAR" property="objectType" />
		    <result column="reply_comment_author_id" jdbcType="BIGINT" property="authorId" />
		    <result column="reply_comment_author" jdbcType="VARCHAR" property="author" />
		    <result column="reply_comment_contact" jdbcType="VARCHAR" property="contact" />
		    <result column="reply_comment_mem_read_status" jdbcType="INTEGER" property="memReadStatus" />
		    <result column="reply_comment_adm_read_status" jdbcType="INTEGER" property="admReadStatus" />
		    <result column="reply_comment_time" jdbcType="VARCHAR" property="time" />
		    <result column="reply_comment_lastreply" jdbcType="VARCHAR" property="lastreply" />
		    <result column="reply_comment_reply_name" jdbcType="VARCHAR" property="replyName" />
		    <result column="reply_comment_inbox" jdbcType="INTEGER" property="inbox" />
		    <result column="reply_comment_track" jdbcType="INTEGER" property="track" />
		    <result column="reply_comment_has_sent" jdbcType="INTEGER" property="hasSent" />
		    <result column="reply_comment_to_id" jdbcType="INTEGER" property="toId" />
		    <result column="reply_comment_to_uname" jdbcType="VARCHAR" property="toUname" />
		    <result column="reply_comment_title" jdbcType="VARCHAR" property="title" />
		    <result column="reply_comment_ip" jdbcType="VARCHAR" property="ip" />
		    <result column="reply_comment_display" jdbcType="INTEGER" property="display" />
		    <result column="reply_comment_gask_type" jdbcType="VARCHAR" property="gaskType" />
		    <result column="reply_comment_p_index" jdbcType="TINYINT" property="pIndex" />
		    <result column="reply_comment_disabled" jdbcType="INTEGER" property="disabled" />
		    <result column="reply_comment_comments_type" jdbcType="VARCHAR" property="commentsType" />
		    <result column="reply_comment_store_id" jdbcType="BIGINT" property="storeId" />
		    <result column="reply_comment_comment" jdbcType="LONGVARCHAR" property="comment" />
    		<result column="reply_comment_addon" jdbcType="LONGVARCHAR" property="addon" />
		</collection>
	</resultMap>
	
	
	<select id="findMemberAskById" parameterType="java.lang.Long" resultMap="CommentsDtoResultMap">
		SELECT
			product.`name` product_name,
			product.product_id,
			product.picture_path,
			product.goods_id,
			comments.comment_id,
			comments.for_comment_id,
			comments.lastreply,
			comments.ip,
			comments.time,
			comments.display,
			comments.author,			
			comments.author_id,
			comments.contact,
			comments.reply_name,
			comments.title,
			comments.`comment`,
			store.store_name,
			replys.`comment` as reply_comment_comment,
			replys.comment_id as reply_comment_comment_id,
			replys.for_comment_id as reply_comment_for_comment_id,
			replys.author as reply_comment_author,
			replys.time as reply_comment_time,
			replys.display as reply_comment_display
		FROM 
			t_member_comments comments
		LEFT JOIN t_member_comments replys ON comments.comment_id=replys.for_comment_id  AND replys.disabled=0
		LEFT JOIN t_products product ON comments.product_id = product.product_id
		LEFT JOIN t_business_storemanger store ON store.store_id=comments.store_id
		where
			comments.for_comment_id=0
		and
			comments.comment_id = #{commentId,jdbcType=INTEGER}
		order by time desc
	</select>
	<select id="findCommentsForBusinessCount" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO" resultType="java.lang.Integer">
		SELECT
			t_member_comments.comment_id
		FROM
			t_member_comments
		LEFT JOIN t_member_comments reply_comment ON reply_comment.for_comment_id = t_member_comments.comment_id AND reply_comment.disabled=0
		LEFT JOIN t_products ON t_products.product_id = t_member_comments.product_id
		LEFT JOIN t_orders on t_orders.order_id=t_member_comments.order_id
		WHERE
			t_member_comments.for_comment_id=0
		AND
			t_member_comments.disabled=0
		AND
			t_member_comments.company_id=#{companyId}
		AND 
			t_member_comments.object_type=#{objectType,jdbcType=VARCHAR}
		<if test="filterReply !=null">
		AND
			<if test="filterReply == 0">
			NOT 
			</if>			
			EXISTS (SELECT cc.comment_id FROM t_member_comments cc WHERE t_member_comments.comment_id=cc.for_comment_id)
		</if>
		GROUP BY 
			t_member_comments.comment_id
		order by
			t_member_comments.time desc,reply_comment.time desc
	</select>
	
	<select id="findCommentsForBusiness" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO" resultMap="CommentsDtoResultMap">
		SELECT
			t_member_comments.comment_id,
			t_member_comments.member_id,
			t_member_comments.for_comment_id,
			t_member_comments.type_id,
			t_member_comments.product_id,
			t_member_comments.order_id,
			t_member_comments.object_type,
			t_member_comments.author_id,
			t_member_comments.author,
			t_member_comments.contact,			
			t_member_comments.time,
			t_member_comments.lastreply,
			t_member_comments.reply_name,			
			t_member_comments.has_sent,
			t_member_comments.to_id,
			t_member_comments.to_uname,
			t_member_comments.title,
			t_member_comments.ip,
			t_member_comments.display,			
			t_member_comments.p_index,
			t_member_comments.disabled,
			t_member_comments.comments_type,
			t_member_comments.store_id,
			t_member_comments.comment,
			reply_comment.comment_id as reply_comment_comment_id,
			reply_comment.member_id as reply_comment_member_id,
			reply_comment.for_comment_id as reply_comment_for_comment_id,
			reply_comment.type_id as reply_comment_product_id_type_id,
			reply_comment.product_id as reply_comment_product_id,
			reply_comment.order_id as reply_comment_order_id,
			reply_comment.object_type as reply_comment_object_type,
			reply_comment.author_id as reply_comment_author_id,
			reply_comment.author as reply_comment_author,
			reply_comment.contact as reply_comment_contact,			
			reply_comment.time as reply_comment_time,
			reply_comment.lastreply as reply_comment_lastreply,
			reply_comment.reply_name as reply_comment_reply_name,						
			reply_comment.to_id as reply_comment_to_id,
			reply_comment.to_uname as reply_comment_to_uname,
			reply_comment.title as reply_comment_title,
			reply_comment.ip as reply_comment_ip,
			reply_comment.display as reply_comment_display,			
			reply_comment.disabled as reply_comment_disabled,
			reply_comment.comments_type as reply_comment_comments_type,
			reply_comment.store_id as reply_comment_store_id,
			reply_comment.comment as reply_comment_comment,
			t_orders.createtime as create_time,			
			t_products.product_id,
			t_products.goods_id,
			t_products.NAME as product_name,
			t_products.bn,
			t_products.price
		FROM
			t_member_comments
		LEFT JOIN t_member_comments reply_comment ON reply_comment.for_comment_id = t_member_comments.comment_id AND reply_comment.disabled=0
		LEFT JOIN t_products ON t_products.product_id = t_member_comments.product_id
		LEFT JOIN t_orders on t_orders.order_id=t_member_comments.order_id
		WHERE
			t_member_comments.for_comment_id=0
		AND
			t_member_comments.disabled=0
		AND
			t_member_comments.company_id=#{companyId}
		AND 
			t_member_comments.object_type=#{objectType,jdbcType=VARCHAR}
		AND
			t_member_comments.comment_id IN
		<foreach collection="commentIds" item="commendId" index="index" open="(" close=")" separator=",">
            #{commendId}
        </foreach>
		<if test="filterReply !=null">
		AND
			<if test="filterReply == 0">
			NOT 
			</if>			
			EXISTS (SELECT cc.comment_id FROM t_member_comments cc WHERE t_member_comments.comment_id=cc.for_comment_id)
		</if>
		order by
			t_member_comments.time desc,reply_comment.time desc
	</select>
	
	<!-- 批量删除评论信息(逻辑删除) -->
	<update id="batchDeleteMemberComment">
		update t_member_comments SET disabled = 1 WHERE comment_id in
    	<foreach collection="array" item="commendId" index="index" open="(" close=")" separator=",">
            #{commendId}
        </foreach>
	</update>
  
	<update id="batchUpdateMemberCommentDisplay">
		update t_member_comments SET display = #{display} WHERE comment_id in
    	<foreach collection="commentIds" item="commendId" index="index" open="(" close=")" separator=",">
            #{commendId}
        </foreach>
	</update>
  
  <select id="selectOrderCommentByGoodsId" resultMap="CommentDetailDTO">
		<!-- SELECT
			c.*, p.goods_point, v.name as member_lv_name, a.login_name, o.createtime
		FROM
			t_member_comments c, t_comment_goods_point p, t_members m, t_pam_account a, t_member_lv v, t_orders o
		where c.comment_id=p.comment_id and c.member_id = m.member_id and m.account_id = a.account_id and 
			m.member_lv_id = v.member_lv_id and c.order_id = o.order_id and p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId}  -->
			SELECT
			c.comment_id,
			c.member_id,
			c.for_comment_id,
			c.type_id,
			c.product_id,
			c.order_id,
			c.object_type,
			c.author_id,
			c.author,
			c.contact,			
			c.time,
			c.lastreply,
			c.reply_name,			
			c.has_sent,
			c.to_id,
			c.to_uname,
			c.title,
			c.ip,
			c.display,			
			c.p_index,
			c.disabled,
			c.comments_type,
			c.store_id,
			c.comment,
			p.goods_point, v.name as member_lv_name, a.login_name, o.createtime
		FROM
			t_member_comments c 
		left join t_comment_goods_point p on c.comment_id=p.comment_id  
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId} 
		order by c.time desc
	</select>
  
  <select id="selectDiscussCommentByGoodsId" resultMap="CommentDetailDTO">
			SELECT
			c.comment_id,
			c.member_id,
			c.for_comment_id,
			c.type_id,
			c.product_id,
			c.order_id,
			c.object_type,
			c.author_id,
			c.author,
			c.contact,			
			c.time,
			c.lastreply,
			c.reply_name,			
			c.has_sent,
			c.to_id,
			c.to_uname,
			c.title,
			c.ip,
			c.display,			
			c.p_index,
			c.disabled,
			c.comments_type,
			c.store_id,
			c.comment,
			c2.comment_id as reply_comment_id,
			c2.author as reply_author,
			c2.comment as reply_comment,
			c2.time as reply_time
		from t_member_comments c
		left join t_member_comments c2 on c.comment_id = c2.for_comment_id and c2.display = 1 and c2.p_index = 0 and c2.disabled = 0
		left join t_products p on c.product_id = p.product_id 
		where c.for_comment_id = 0 and c.object_type = 'ask' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId}
			
		<if test="list!=null">
			and 
			<foreach item="item" index="index" collection="list" open="(" separator="or" close=")">
		    	<!-- <bind name="pattern" value="'%' + item + '%'" />
		    	 c.comment like #{pattern} -->
		    	 c.comment like CONCAT('%', #{item},'%')
		    </foreach>
		</if>
		group by c.comment_id 
		order by c.time desc
	</select>
	
	<!-- 查询用户评论数量 -->
	<select id="selectMemberCommentCount" resultType="Integer" parameterType="java.lang.Integer">
		SELECT
			comments.comment_id
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments append ON comments.comment_id = append.for_comment_id AND append.comments_type = 3
		WHERE
			comments.for_comment_id = 0
		AND comments.comments_type = 1
		AND comments.member_id=#{memberId}
		GROUP BY comments.comment_id
	</select>
	<!-- 查询用户咨询数量 -->
	<select id="selectMemberConsultCount" resultType="Integer" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			comments.comment_id
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments append ON comments.comment_id = append.for_comment_id AND append.comments_type = 2
		WHERE
			comments.for_comment_id = 0
		AND comments.object_type = #{objectType}
		AND comments.member_id=#{memberId}
		GROUP BY comments.comment_id
		ORDER BY comments.time DESC
	</select>
	
	<!-- 查询用户评论-->
	<select id="selectMemberComment" resultMap="CommentsDtoResultMap" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			comments.comment_id,
			comments.`comment`,
			comments.title,
			comments.time,
			append.comment_id reply_comment_id,
			append.`comment` reply_comment,
			append.time reply_comment_time,
			product.`name` product_name,
			product.product_id,
			product.goods_id,
			pic.picture_path,
			(SELECT COUNT(0) FROM t_member_comments reply WHERE comments.comment_id=reply.for_comment_id AND reply.comments_type=0) reply_count
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments append ON comments.comment_id = append.for_comment_id AND append.comments_type = 3
		LEFT JOIN t_products product ON comments.product_id=product.product_id
		LEFT JOIN v_goods_picture pic ON product.goods_id=pic.goods_id AND product.product_id=pic.product_id
		WHERE
			comments.for_comment_id = 0
		AND comments.comments_type = #{commentsType}
		AND comments.member_id=#{memberId}
		AND comments.comment_id in
        <foreach collection="commentIds" item="commentId" index="index" open="(" close=")" separator=",">
            #{commentId}
        </foreach>
        ORDER BY comments.time DESC
	</select>
	
	<!-- 查询用户咨询 -->
	<select id="selectMemberConsult" resultMap="CommentsDtoResultMap" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			comments.comment_id,
			comments.`comment`,
			comments.title,
			comments.time,
			reply.comment_id reply_comment_comment_id,
			reply.`comment` reply_comment_comment,
			reply.time reply_comment_time,
			product.`name` product_name,
			product.product_id,
			product.goods_id,
			product.picture_path,
			(SELECT COUNT(0) FROM t_member_comments reply_count WHERE comments.comment_id=reply_count.for_comment_id AND reply_count.comments_type=2) reply_count
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments reply ON comments.comment_id = reply.for_comment_id AND reply.comments_type = 2
		LEFT JOIN t_products product ON comments.product_id=product.product_id		
		WHERE
			comments.for_comment_id = 0
		AND comments.object_type = #{objectType}
		AND comments.member_id=#{memberId}
		AND comments.comment_id in
        <foreach collection="commentIds" item="commentId" index="index" open="(" close=")" separator=",">
            #{commentId}
        </foreach>
        ORDER BY comments.time DESC
	</select>
	
	<!-- 查询商品咨询以及回复 -->
	<select id="selectGoodsConsultCount" resultType="Integer" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			comments.comment_id
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments reply ON comments.comment_id = reply.for_comment_id AND reply.comments_type = 2
		LEFT JOIN t_products product ON comments.product_id=product.product_id		
		WHERE
			comments.for_comment_id = 0
		AND comments.object_type = 'ask'
		AND product.goods_id=#{goodsId}
		<if test="keyWords!=null and keyWords!=''">
		AND (product.`name` LIKE LIKE CONCAT('%', #{keyWords},'%') OR comments.`comment` LIKE CONCAT('%', #{keyWords},'%'))
		</if>
        GROUP BY comments.comment_id
        ORDER BY comments.time DESC
	</select>
	
	<select id="selectGoodsConsult" resultMap="CommentsDtoResultMap" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			comments.comment_id,
			comments.`comment`,
			comments.title,
			comments.time,
			comments.author,
			reply.comment_id reply_comment_comment_id,
			reply.`comment` reply_comment_comment,
			reply.time reply_comment_time,
			product.`name` product_name,
			product.product_id,
			product.goods_id,
			product.picture_path			
		FROM
			t_member_comments comments
		LEFT JOIN t_member_comments reply ON comments.comment_id = reply.for_comment_id AND reply.comments_type = 2
		LEFT JOIN t_products product ON comments.product_id=product.product_id		
		WHERE
			comments.for_comment_id = 0
		AND comments.object_type = 'ask'
		AND product.goods_id=#{goodsId}
		<if test="keyWords!=null and keyWords!=''">
		AND (product.`name` LIKE LIKE CONCAT('%', #{keyWords},'%') OR comments.`comment` LIKE CONCAT('%', #{keyWords},'%'))
		</if>
		AND comments.comment_id in
        <foreach collection="commentIds" item="commentId" index="index" open="(" close=")" separator=",">
            #{commentId}
        </foreach>
        ORDER BY comments.time DESC
	</select>
	
	<!-- 查询用评论解释数 -->
	<select id="selectMemberCommentReply" resultMap="ResultMapWithBLOBs" parameterType="com.cnit.yoyo.model.member.dto.MemberCommentQryDTO">
		SELECT
			<include refid="Base_Column_List" />
		    ,
		    <include refid="Blob_Column_List" />
		FROM
			t_member_comments comments		
		WHERE
			comments.for_comment_id = #{commentId}
		AND comments.comments_type = #{commentsType}
		AND comments.member_id=#{memberId}
		ORDER BY comments.time DESC
	</select>
	
	
	<select id="selectCommentCountByGoodsId" resultType="java.lang.Long">
		SELECT
			count(*)
		FROM
			t_member_comments c, t_comment_goods_point p, t_members m, t_pam_account a, t_member_lv v, t_orders o
		where c.comment_id=p.comment_id and c.member_id = m.member_id and m.account_id = a.account_id and 
			m.member_lv_id = v.member_lv_id and c.order_id = o.order_id and p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId} 
	</select>
	
	<select id="selectCommentCountByGoodsIdAndPoint" resultType="java.lang.Long">
		SELECT
			count(*)
		FROM
			t_member_comments c, t_comment_goods_point p, t_members m, t_pam_account a, t_member_lv v, t_orders o
		where c.comment_id=p.comment_id and c.member_id = m.member_id and m.account_id = a.account_id and 
			m.member_lv_id = v.member_lv_id and c.order_id = o.order_id and p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId} and p.goods_point in 
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		    	#{item}  
		   	</foreach>
			
	</select>
	
	<select id="selectCommentCountByProductId" resultType="java.lang.Long">
		SELECT
			count(*)
		FROM
			t_member_comments c, t_comment_goods_point p, t_members m, t_pam_account a, t_member_lv v, t_orders o
		where c.comment_id=p.comment_id and c.member_id = m.member_id and m.account_id = a.account_id and 
			m.member_lv_id = v.member_lv_id and c.order_id = o.order_id and p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.product_id = #{productId} 
	</select>
	
	<select id="selectSumPointByProductId" resultType="java.lang.Long">
		SELECT
			sum(p.goods_point)
		FROM
			t_member_comments c, t_comment_goods_point p, t_members m, t_pam_account a, t_member_lv v, t_orders o
		where c.comment_id=p.comment_id and c.member_id = m.member_id and m.account_id = a.account_id and 
			m.member_lv_id = v.member_lv_id and c.order_id = o.order_id and p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.product_id = #{productId} 
	</select>
	
	
	<select id="selectReplyByCommentId" parameterType="java.lang.Integer" resultMap="CommentDetailDTO">
		SELECT
			*
		FROM
			t_member_comments c 
		where c.for_comment_id = #{commentId} and c.object_type = 'reply' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 
		order by c.time desc
	</select>
	
	<select id="selectReplyCountByCommentId" resultType="java.lang.Integer">
		SELECT
			count(*)
		FROM
			t_member_comments c 
		where c.for_comment_id = #{commentId} and c.object_type = 'reply' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 
	</select>
	
	<select id="selectCommentByBLOBs" parameterType="com.cnit.yoyo.model.member.MemberCommentWithBLOBs" resultMap="CommentDetailDTO">
    select * from t_member_comments
    where 1=1 
      <if test="memberId != null">
        and member_id = #{memberId,jdbcType=INTEGER}
      </if>
      <if test="forCommentId != null">
        and for_comment_id = #{forCommentId,jdbcType=INTEGER}
      </if>
      <if test="typeId != null">
        and type_id = #{typeId,jdbcType=BIGINT}
      </if>
      <if test="productId != null">
        and product_id = #{productId,jdbcType=INTEGER}
      </if>
      <if test="orderId != null">
        and order_id = #{orderId,jdbcType=BIGINT}
      </if>
      <if test="objectType != null">
        and object_type = #{objectType,jdbcType=VARCHAR}
      </if>
      <if test="authorId != null">
        and author_id = #{authorId,jdbcType=BIGINT}
      </if>
      <if test="author != null">
        and author = #{author,jdbcType=VARCHAR}
      </if>
      <if test="contact != null">
        and contact = #{contact,jdbcType=VARCHAR}
      </if>
      <if test="memReadStatus != null">
        and mem_read_status = #{memReadStatus,jdbcType=INTEGER}
      </if>
      <if test="admReadStatus != null">
        and adm_read_status = #{admReadStatus,jdbcType=INTEGER}
      </if>
      <!-- <if test="time != null">
        and time = #{time,jdbcType=VARCHAR}
      </if> -->
      <if test="lastreply != null">
        and lastreply = #{lastreply,jdbcType=VARCHAR}
      </if>
      <if test="replyName != null">
        and reply_name = #{replyName,jdbcType=VARCHAR}
      </if>
      <if test="inbox != null">
        and inbox = #{inbox,jdbcType=INTEGER}
      </if>
      <if test="track != null">
        and track = #{track,jdbcType=INTEGER}
      </if>
      <if test="hasSent != null">
        and has_sent = #{hasSent,jdbcType=INTEGER}
      </if>
      <if test="toId != null">
        and to_id = #{toId,jdbcType=INTEGER}
      </if>
      <if test="toUname != null">
        and to_uname = #{toUname,jdbcType=VARCHAR}
      </if>
      <if test="title != null">
        and title = #{title,jdbcType=VARCHAR}
      </if>
      <if test="ip != null">
        and ip = #{ip,jdbcType=VARCHAR}
      </if>
      <if test="display != null">
        and display = #{display,jdbcType=INTEGER}
      </if>
      <if test="gaskType != null">
        and gask_type = #{gaskType,jdbcType=VARCHAR}
      </if>
      <if test="pIndex != null">
        and p_index = #{pIndex,jdbcType=TINYINT}
      </if>
      <if test="disabled != null">
        and disabled = #{disabled,jdbcType=INTEGER}
      </if>
      <if test="commentsType != null">
        and comments_type = #{commentsType,jdbcType=VARCHAR}
      </if>
      <if test="storeId != null">
        and store_id = #{storeId,jdbcType=BIGINT}
      </if>
      <if test="comment != null">
        and comment = #{comment,jdbcType=VARCHAR}
      </if>
      <if test="addon != null">
        and addon = #{addon,jdbcType=LONGVARCHAR}
      </if>
      order by time desc
  </select>
  
  <select id="selectCommentById" resultMap="CommentDetailDTO">
			SELECT
			c.comment_id,
			c.member_id,
			c.for_comment_id,
			c.type_id,
			c.product_id,
			c.order_id,
			c.object_type,
			c.author_id,
			c.author,
			c.contact,			
			c.time,
			c.lastreply,
			c.reply_name,			
			c.has_sent,
			c.to_id,
			c.to_uname,
			c.title,
			c.ip,
			c.display,			
			c.p_index,
			c.disabled,
			c.comments_type,
			c.store_id,
			c.comment,
			p.goods_point, v.name as member_lv_name, a.login_name, o.createtime
		FROM
			t_member_comments c 
		left join t_comment_goods_point p on c.comment_id=p.comment_id  
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and c.comment_id=#{commentId}
	</select>
  
  	<select id="selectReplyById" resultMap="CommentDetailDTO">
			SELECT
			c.comment_id,
			c.member_id,
			c.for_comment_id,
			c.type_id,
			c.product_id,
			c.order_id,
			c.object_type,
			c.author_id,
			c.author,
			c.contact,			
			c.time,
			c.lastreply,
			c.reply_name,			
			c.has_sent,
			c.to_id,
			c.to_uname,
			c.title,
			c.ip,
			c.display,			
			c.p_index,
			c.disabled,
			c.comments_type,
			c.store_id,
			c.comment,
			v.name as member_lv_name, a.login_name
		FROM
			t_member_comments c 
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		where c.object_type = 'reply' and c.display = 1 and 
			c.p_index = 0 and c.disabled = 0 and c.comment_id=#{commentId}
	</select>
  
  
  	<select id="selectOrderCommentCountByProductId" resultType="java.lang.Integer">
		<!-- SELECT count(*)
		FROM
			t_member_comments c 
		left join t_comment_goods_point p on c.comment_id=p.comment_id  
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.product_id = #{productId} 
		order by c.time desc -->
		
		SELECT count(*)
		FROM
			t_order_comment c 
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where c.for_comment_id = 0 
			and c.display = '1' and c.product_id = #{productId} 
		order by c.create_time desc
	</select>
	
	<select id="selectOrderCommentCountByGoodsId" resultType="java.lang.Integer">
		<!-- SELECT count(*)
		FROM
			t_member_comments c 
		left join t_comment_goods_point p on c.comment_id=p.comment_id  
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where p.disabled = 0 and c.for_comment_id = 0 and c.object_type = 'order' 
			and c.display = 1 and c.p_index = 0 and c.disabled = 0 and p.goods_id = #{goodsId} 
		order by c.time desc -->
		SELECT count(*)
		FROM
			t_order_comment c 
		left join t_products p on c.product_id = p.product_id
		left join t_members m on c.member_id = m.member_id 
		left join t_pam_account a on m.account_id = a.account_id 
		left join t_member_lv v on m.member_lv_id = v.member_lv_id
		left join t_orders o on c.order_id = o.order_id
		where c.for_comment_id = 0 
			and c.display = '1' and p.goods_id = #{goodsId} 
		order by c.create_time desc
	</select>
  
  
</mapper>