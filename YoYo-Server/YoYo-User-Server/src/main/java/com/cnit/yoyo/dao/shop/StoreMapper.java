package com.cnit.yoyo.dao.shop;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.cnit.yoyo.model.goods.Store;
import com.cnit.yoyo.model.goods.dto.StoreDTO;
import com.cnit.yoyo.model.shop.Violation;

public interface StoreMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int deleteByPrimaryKey(Long storeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int insert(Store record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int insertSelective(Store record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    Store selectByPrimaryKey(Long storeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int updateByPrimaryKeySelective(Store record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int updateByPrimaryKeyWithBLOBs(Store record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_business_storemanger
     *
     * @mbggenerated Thu Mar 05 13:15:02 CST 2015
     */
    int updateByPrimaryKey(Store record);
    
    
   /**
    * 
    * @Title: findShopByCompanyId 
    * @Description: 通过集团id查找分店
    * @param @param companyId
    * @param @return    设定文件 
    * @author xiaox
    * @date 2015-3-18 下午2:21:48
    */
    List<Store> findShopByCompanyId(Long companyId);   //2015.05.15 修改返回值由StoreDTO改为Store
    
    /**
     * 
     * @Title: selectByStoreIdList 
     * @Description: 通过店铺id列表查找分店
     * @param @param storeIdList
     * @param @return    设定文件 
     * @author <a href="cmlai@chinacnit.com">赖彩妙</a>
     * @date 2015-4-18 
     */
     List<StoreDTO> selectByStoreIdList(List<Integer> storeIdList);
     
     List<Store> selectByStoreIdList2(List<Integer> storeIdList);
     
     /**
      * @Title: selectByAccountId 
      * @Description: TODO(根据accountId查询店铺对象) 
      * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
      * @date 2015-4-22 下午4:39:28 
      * @version 1.0.0 
      * @param accountId
      * @param @return    
      * @return StoreDTO    返回类型 
      * @throws
      */
     List<Store> selectByAccountId(Integer accountId);
     
     int findStoreNumById(Long companyId,Long storeId);
     
     void updateStoreNum(Long companyId,Long storeId,Integer storeNum);

	List<Store> findSelect(Long companyId);
	
	/**
	 * @Title:  updateByViolation  
	 * @Description:  TODO(根据违规处理更新分店对象)  
	 * @author <a href="cmlai@chinacnit.com">赖彩妙</a> 
	 * @date 2015-6-11 下午1:57:45  
	 * @version 1.0.0 
	 * @param @param violation
	 * @param @param storeId
	 * @param @return
	 * @return int  返回类型 
	 * @throws
	 */
	int updateByViolation(@Param("violation")Violation violation, @Param("store")Store store);
	/**
	 * 
	 *@description 根据店铺id批量删除
	 *@detail <方法详细描述>
	 *@author <a href="xiaoxiang@cnit.com">肖湘</a>
	 *@version 1.0.0
	 *@data 2015-6-15
	 *@param companyIds
	 *@return
	 */
	int deleteAllByCompanyId(Integer []companyIds);
	
	/**
	 * @description <b>查询店铺以及其集团信息</b>
	 * @author 王鹏
	 * @version 1.0.0
	 * @data 2015-8-11
	 * @param param
	 * @return
	 * Store
	*/
	Store selectShopAndCompany(Map<String, Object> param);
}